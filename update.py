#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞ artur789298.work.gd
–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import os
import sys
import subprocess
import time
import shutil
import argparse
from datetime import datetime
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DOMAIN = "artur789298.work.gd"
PROJECT_NAME = "service-moscow"
INSTALL_DIR = f"/opt/{PROJECT_NAME}"
BACKUP_DIR = f"{INSTALL_DIR}/backups"

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

def log(msg, color=Colors.GREEN):
    print(f"{color}[UPDATE] {msg}{Colors.END}")

def error(msg):
    print(f"{Colors.RED}[ERROR] {msg}{Colors.END}")
    sys.exit(1)

def warning(msg):
    print(f"{Colors.YELLOW}[WARNING] {msg}{Colors.END}")

def run_cmd(cmd, check=True, capture=False):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    log(f"–í—ã–ø–æ–ª–Ω—è—é: {cmd}", Colors.BLUE)
    try:
        if capture:
            result = subprocess.run(cmd, shell=True, check=check, 
                                 capture_output=True, text=True)
            return result.stdout.strip()
        else:
            subprocess.run(cmd, shell=True, check=check)
            return True
    except subprocess.CalledProcessError as e:
        if check:
            error(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {cmd}")
        return False

def check_root():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ root –ø—Ä–∞–≤"""
    if os.geteuid() != 0:
        error("–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo python3 update.py")

def check_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–∞–π—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    if not os.path.exists(INSTALL_DIR):
        error(f"–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {INSTALL_DIR}. –ó–∞–ø—É—Å—Ç–∏—Ç–µ deploy.py —Å–Ω–∞—á–∞–ª–∞.")
    
    if not os.path.exists(f"{INSTALL_DIR}/docker-compose.yml"):
        error(f"docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {INSTALL_DIR}. –ü—Ä–æ–µ–∫—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
    
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

def create_backup(no_backup=False):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    if no_backup:
        log("–ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        return
    
    log("–°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    os.makedirs(BACKUP_DIR, exist_ok=True)
    
    # –ò–º—è –±—ç–∫–∞–ø–∞ —Å —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"backup_{timestamp}"
    backup_path = f"{BACKUP_DIR}/{backup_name}"
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏
    if os.path.exists(f"{INSTALL_DIR}/src"):
        shutil.copytree(f"{INSTALL_DIR}/src", backup_path)
        log(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
    else:
        warning("–ü–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")

def update_content():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–∞–π—Ç–∞"""
    log("–û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∞–π—Ç–∞...")
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏
    temp_dir = "/tmp/service-moscow-update"
    run_cmd(f"rm -rf {temp_dir}", check=False)
    run_cmd(f"git clone https://github.com/KomarovAI/service.moscow.git {temp_dir}")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏
    if os.path.exists(f"{INSTALL_DIR}/src"):
        run_cmd(f"rm -rf {INSTALL_DIR}/src")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ
    run_cmd(f"cp -r {temp_dir}/src {INSTALL_DIR}/")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    run_cmd(f"rm -rf {temp_dir}")
    
    log("–ö–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!")

def rebuild_containers():
    """–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    log("–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...")
    
    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–±-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    run_cmd(f"cd {INSTALL_DIR} && docker compose up -d --build web")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    time.sleep(5)
    
    log("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã!")

def cleanup_old_images(no_cleanup=False):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤"""
    if no_cleanup:
        log("–ü—Ä–æ–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤")
        return
    
    log("–û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ Docker –æ–±—Ä–∞–∑—ã...")
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
    run_cmd("docker image prune -f", check=False)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    run_cmd("docker container prune -f", check=False)
    
    log("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def check_health(quick=False):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    log("–ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å...")
    
    if not quick:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        run_cmd(f"cd {INSTALL_DIR} && docker compose ps")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
    http_test = run_cmd(f"curl -I http://{DOMAIN}", check=False)
    https_test = run_cmd(f"curl -I https://{DOMAIN}", check=False)
    
    if http_test or https_test:
        log(f"‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: https://{DOMAIN}")
    else:
        warning(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∞–π—Ç—É!")

def show_logs():
    """–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤"""
    log("–ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏...")
    run_cmd(f"cd {INSTALL_DIR} && docker compose logs --tail=20")

def cleanup_old_backups():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)"""
    if not os.path.exists(BACKUP_DIR):
        return
    
    backups = []
    for item in os.listdir(BACKUP_DIR):
        backup_path = os.path.join(BACKUP_DIR, item)
        if os.path.isdir(backup_path) and item.startswith("backup_"):
            backups.append((backup_path, os.path.getctime(backup_path)))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –≤–ø–µ—Ä–µ–¥–∏)
    backups.sort(key=lambda x: x[1], reverse=True)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º 5)
    for backup_path, _ in backups[5:]:
        shutil.rmtree(backup_path)
        log(f"–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {os.path.basename(backup_path)}")

def print_final_report():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç"""
    log("=" * 50, Colors.BOLD)
    log("üéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!", Colors.BOLD)
    log("=" * 50, Colors.BOLD)
    
    log(f"üåê –°–∞–π—Ç: https://{DOMAIN}")
    log(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {INSTALL_DIR}")
    
    if os.path.exists(BACKUP_DIR):
        backup_count = len([f for f in os.listdir(BACKUP_DIR) if f.startswith("backup_")])
        log(f"üíæ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {backup_count}")
    
    log("üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    log(f"   –õ–æ–≥–∏:        cd {INSTALL_DIR} && docker compose logs -f")
    log(f"   –°—Ç–∞—Ç—É—Å:      cd {INSTALL_DIR} && docker compose ps")
    log(f"   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:  cd {INSTALL_DIR} && docker compose restart")
    
    log("=" * 50, Colors.BOLD)
    log("–û–ë–ù–û–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û! üöÄ", Colors.BOLD)
    log("=" * 50, Colors.BOLD)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–∞–π—Ç–∞")
    parser.add_argument("--no-backup", action="store_true", help="–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
    parser.add_argument("--no-cleanup", action="store_true", help="–ù–µ —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ Docker –æ–±—Ä–∞–∑—ã")
    parser.add_argument("--show-logs", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    parser.add_argument("--quick", action="store_true", help="–ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
    args = parser.parse_args()
    
    try:
        log("–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞...", Colors.BOLD)
        
        check_root()
        check_installation()
        
        # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        create_backup(args.no_backup)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        update_content()
        
        # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        rebuild_containers()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
        cleanup_old_images(args.no_cleanup)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        cleanup_old_backups()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        check_health(args.quick)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.show_logs:
            show_logs()
        
        print_final_report()
        
    except KeyboardInterrupt:
        error("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()